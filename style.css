.cs
/*::::::: Setting the background ::::::::*/
/*::::::: aligning the board and adding heading to it ::::::::*/
/*::::::: Common styling of all Blocks or cells ::::::::*/
/*::::::: Styling individual cells ::::::::*/
/*::::::: Setting the background ::::::::*/
body {
    /*Adding a background to the window*/
    background: #f3f3f3 url('img_tree.png');
}
/*::::::: aligning the board and adding heading to it ::::::::*/

#board {
    padding: 1em;
    text-align: center;
}
.heading {
    padding-bottom: 1em;
    font-family: monospace;
} 
/* To avoid the overlapping of the rows I have used clear and float*/
.row {
    clear: both;
    margin: 0 auto;
    width: 302px;
}
/*::::::: Common styling of all Blocks or cells ::::::::*/
.row>div {
    float: left;
    height: 100px;
    width: 100px;
    cursor: pointer;
    line-height: 100px;
    font-size: 72px;
} 
.row>div:hover {
    background-color: lightgrey;
}
/*::::::: Styling individual cells ::::::::*/
/* Here we separated the individual cells by lines between them*/
.top {
    border-bottom: 1px black solid;
} 
.middle {
    border-bottom: 1px rgb(0, 0, 0) solid;
}  
.left {
    border-right: 1px black solid;
} 
.right {
    border-left: 1px black solid;
}<!-- Add this at the end of your index.html file just before the closing body tag -->
<script src="app.js"> </script>
<!-- This will make the background to not to repeat. It's upto you that how you want to keeep it. -->
<script>
        document.body.style.backgroundRepeat = "no-repeat";</script>/******* VAriables Declaration and Div Selection *******/
/******* Function to check for winner *******/
/******* Function to check for Draw *******/
/******* Function for checking the clicked cell, swapping chances and calling other functions *******/const Player1 = "X";
const Player2 = 'O';
let turn = 'X';
let clicks = 0;
let cells = document.querySelectorAll('.row > div');
for (let i = 0; i < cells.length; i++) {
    cells[i].addEventListener('click', cellClicked);
/***** Function for checking the clicked cell, swapping chances and calling other functions ********/
function cellClicked() {
    clicks++;
    if(event.target.textContent != 'X' && event.target.textContent != 'O') {
        event.target.textContent = turn;
        checkDraw();
        if (turn === 'X') {
            checkForWinner();
            turn = 'O';
        } 
        else {
            checkForWinner();
            turn = 'X';
        }
    }
    else {
        alert('Invalid Move!');
    }
 }/******* Function to check for winner *******/
function checkForWinner() {
    let win = false;
/****** Horizontal Checks  *********/
    if (cells[0].textContent === turn && cells[1].textContent === turn && cells[2].textContent === turn) {
        win = true;
    }
    else if (cells[3].textContent === turn && cells[4].textContent === turn && cells[5].textContent === turn) {
        win = true;
    }
    else if (cells[6].textContent === turn && cells[7].textContent === turn && cells[8].textContent === turn) {
        win = true;
    }
/******** Vertical Checks *******/
    else if (cells[0].textContent === turn && cells[3].textContent === turn && cells[6].textContent === turn) {
        win = true;
    }
    else if (cells[1].textContent === turn && cells[4].textContent === turn && cells[7].textContent === turn) {
        win = true;
    }
    else if (cells[2].textContent === turn && cells[5].textContent === turn && cells[6].textContent === turn) {
        win = true;
    }
/* Diagonal checks */
    else if (cells[0].textContent === turn && cells[4].textContent === turn && cells[8].textContent === turn) {
        win = true;
    }
    else if (cells[2].textContent === turn && cells[4].textContent === turn && cells[6].textContent === turn) {
        win = true;
    }
    if (win === true) {
        alert(turn + ' wins');
        setTimeout("location.reload(true);", 10000);
     /* setTimeout() will reload the page in given time if any of the player wins the game.*/
    }
}